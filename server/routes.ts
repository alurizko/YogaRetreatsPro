import type { Express } from "express";
import { createServer, type Server } from "http";
import Stripe from "stripe";
// –£–¥–∞–ª—ë–Ω –∏–º–ø–æ—Ä—Ç setupAuth, isAuthenticated –∏–∑ ./replitAuth
import { insertRetreatSchema, insertBookingSchema, insertRefundRequestSchema, insertRetreatApplicationSchema, retreat_applications } from "@shared/schema";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { users } from "@shared/schema";
import { eq } from "drizzle-orm";
import { db } from "./db";
import crypto from "crypto";
import passport from "passport";
import session from "express-session";
import { Strategy as GoogleStrategy } from "passport-google-oauth20";
import cookieParser from "cookie-parser";
import nodemailer from "nodemailer";

let stripe: Stripe | null = null;

if (process.env.STRIPE_SECRET_KEY) {
  stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
    apiVersion: "2025-06-30.basil",
  });
} else {
  console.warn('Warning: STRIPE_SECRET_KEY not configured. Payment functionality will be disabled.');
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∞)
const resetTokens: Record<string, string> = {};

export async function registerRoutes(app: Express): Promise<Server> {
  // API endpoint –¥–ª—è –∑–∞—è–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Ä–µ—Ç—Ä–∏—Ç–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π, –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
  app.post("/api/retreat-applications", async (req, res) => {
    try {
      console.log("–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", req.body);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Zod —Å—Ö–µ–º—ã
      const validatedData = insertRetreatApplicationSchema.parse(req.body);
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –ë–î (–ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
      const fs = require('fs');
      const path = require('path');
      
      const applicationWithId = {
        id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
        ...validatedData,
        status: 'pending',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª applications.json
      const applicationsFile = path.join(process.cwd(), 'applications.json');
      let applications = [];
      
      try {
        if (fs.existsSync(applicationsFile)) {
          const data = fs.readFileSync(applicationsFile, 'utf8');
          applications = JSON.parse(data);
        }
      } catch (err) {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª applications.json');
      }
      
      applications.push(applicationWithId);
      fs.writeFileSync(applicationsFile, JSON.stringify(applications, null, 2));
      
      console.log("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª:", applicationWithId);
      
      res.status(201).json({
        success: true,
        message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
        application: applicationWithId
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
      
      if (error instanceof Error && error.name === 'ZodError') {
        return res.status(400).json({
          success: false,
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
          errors: error
        });
      }
      
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏"
      });
    }
  });

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ express-session –∏ passport
  app.use(session({
    secret: process.env.SESSION_SECRET || "your_secret",
    resave: false,
    saveUninitialized: false,
  }));
  app.use(cookieParser());
  app.use(passport.initialize());
  app.use(passport.session());

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Google
  passport.use(new GoogleStrategy({
    clientID: process.env.GOOGLE_CLIENT_ID!,
    clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    callbackURL: process.env.GOOGLE_CALLBACK_URL || "http://localhost:5000/api/auth/google/callback"
  },
    async (accessToken: string, refreshToken: string, profile: any, done: any) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –ø–æ email (–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ id)
        let usersResult = await db.select().from(users).where(eq(users.email, profile.emails?.[0].value));
        let user;
        if (usersResult.length) {
          user = usersResult[0];
        } else {
          // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
          const firstName = profile.name?.givenName || "Google";
          const lastName = profile.name?.familyName || "User";
          const [newUser] = await db.insert(users).values({
            id: profile.id, // profile.id –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω
            email: profile.emails?.[0].value,
            firstName,
            lastName,
            role: "user"
          }).returning();
          user = newUser;
        }
        // –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log("[GoogleStrategy] user.id:", user.id, "user.email:", user.email);
        return done(null, user);
      } catch (err) {
        return done(err);
      }
    }
  ));
  passport.serializeUser((user: any, done) => {
    done(null, user);
  });
  passport.deserializeUser((user: any, done) => {
    done(null, user);
  });

  // Google OAuth –º–∞—Ä—à—Ä—É—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∂–∏–º–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
  app.get('/api/auth/google', (req, res, next) => {
    console.log(`üîç [Google OAuth] === –ù–ê–ß–ê–õ–û –ó–ê–ü–†–û–°–ê ===`);
    console.log(`üîç [Google OAuth] URL: ${req.url}`);
    console.log(`üîç [Google OAuth] Query params:`, req.query);
    
    const mode = req.query.mode as string; // 'register' –∏–ª–∏ 'login'
    const prompt = req.query.prompt as string; // 'select_account' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    
    console.log(`üîç [Google OAuth] –ó–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: mode=${mode}, prompt=${prompt}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callback
    req.session = req.session || {};
    (req.session as any).googleMode = mode;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google
    const authOptions: any = { 
      scope: ['profile', 'email'] 
    };
    
    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω prompt=select_account, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ–ø—Ü–∏–∏
    if (prompt === 'select_account') {
      authOptions.prompt = 'select_account';
      console.log(`üîç [Google OAuth] –î–æ–±–∞–≤–ª–µ–Ω prompt=select_account`);
    }
    
    console.log(`üîç [Google OAuth] –û–ø—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:`, authOptions);
    console.log(`üîç [Google OAuth] –í—ã–∑—ã–≤–∞–µ–º passport.authenticate`);
    
    passport.authenticate('google', authOptions)(req, res, next);
    
    console.log(`üîç [Google OAuth] === –ö–û–ù–ï–¶ –ó–ê–ü–†–û–°–ê ===`);
  });

  app.get('/api/auth/google/callback',
    passport.authenticate('google', { failureRedirect: '/login', session: false }),
    async (req, res) => {
      try {
        let user = req.user as any;
        const mode = (req.session as any)?.googleMode || 'login';
        
        console.log(`üîç [Google OAuth] === –ù–ê–ß–ê–õ–û CALLBACK ===`);
        console.log(`üîç [Google OAuth] –†–µ–∂–∏–º: ${mode}`);
        console.log(`üîç [Google OAuth] Email: ${user.email}`);
        console.log(`üîç [Google OAuth] User ID: ${user.id}`);
        console.log(`üîç [Google OAuth] User object:`, JSON.stringify(user, null, 2));
        
        if (mode === 'register') {
          // –†–µ–∂–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const existingUser = await db.select().from(users).where(eq(users.email, user.email));
          
          if (existingUser.length > 0) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Google
            const retryCount = (req.session as any)?.googleRegisterRetry ?? 0;
            console.log(`üîç [Google OAuth] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. retryCount=${retryCount}`);
            if (retryCount < 1) {
              (req.session as any).googleRegisterRetry = retryCount + 1;
              console.log('üîç [Google OAuth] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å prompt=select_account');
              res.redirect('/api/auth/google?mode=register&prompt=select_account');
              return;
            }
            (req.session as any).googleRegisterRetry = 0;
            console.log('üîç [Google OAuth] –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –í–æ–∑–≤—Ä–∞—Ç —Å –æ—à–∏–±–∫–æ–π –Ω–∞ /auth');
            res.redirect('http://localhost:5173/auth?error=user_exists&email=' + encodeURIComponent(user.email));
            return;
          }
          
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
          console.log(`üîç [Google OAuth] –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
          const [newUser] = await db.insert(users).values({
            id: user.id,
            email: user.email,
            firstName: user.firstName || user.name?.givenName || 'Google',
            lastName: user.lastName || user.name?.familyName || 'User',
            role: "user"
          }).returning();
          user = newUser;
        } else {
          // –†–µ–∂–∏–º –≤—Ö–æ–¥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          const existingUser = await db.select().from(users).where(eq(users.email, user.email));
          
          if (existingUser.length === 0) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            console.log(`üîç [Google OAuth] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥`);
            const [newUser] = await db.insert(users).values({
              id: user.id,
              email: user.email,
              firstName: user.firstName || user.name?.givenName || 'Google',
              lastName: user.lastName || user.name?.familyName || 'User',
              role: "user"
            }).returning();
            user = newUser;
          } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google
            console.log(`üîç [Google OAuth] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥`);
            await db.update(users).set({
              firstName: user.firstName || user.name?.givenName || existingUser[0].firstName,
              lastName: user.lastName || user.name?.familyName || existingUser[0].lastName,
              updatedAt: new Date()
            }).where(eq(users.email, user.email));
            user = existingUser[0];
          }
        }
        
        console.log(`üîç [Google OAuth] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.email}`);
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT
        const token = jwt.sign(
          { id: user.id, email: user.email },
          process.env.JWT_SECRET!,
          { expiresIn: "7d" }
        );
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ httpOnly cookie
        res.cookie('token', token, { httpOnly: true, sameSite: 'lax' });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        try { (req.session as any).googleRegisterRetry = 0; } catch {}
        // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–¥—ç—à–±–æ—Ä–¥
        res.redirect('http://localhost:5173/participant/dashboard');
        console.log(`üîç [Google OAuth] === –ö–û–ù–ï–¶ CALLBACK ===`);
      } catch (error) {
        console.error('üîç [Google OAuth] –û—à–∏–±–∫–∞ –≤ callback:', error);
        res.redirect('http://localhost:5173?error=auth_failed');
      }
    }
  );

  // –£–¥–∞–ª—ë–Ω –≤—ã–∑–æ–≤ setupAuth(app);

  // –£–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è isAuthenticated –Ω–∞ (req, res, next) => next() –¥–ª—è —Ç–µ—Å—Ç–∞
  // Auth routes
  app.get('/api/auth/user', async (req, res, next) => {
    try {
      const token = req.cookies.token;
      if (!token) return res.status(401).json({ message: "Not authenticated" });
      let payload;
      try {
        payload = jwt.verify(token, process.env.JWT_SECRET!);
      } catch {
        return res.status(401).json({ message: "Invalid token" });
      }
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ id –∏–∑ —Ç–æ–∫–µ–Ω–∞
      const userId = (payload as any).id;
      const usersResult = await db.select().from(users).where(eq(users.id, userId));
      if (!usersResult.length) {
        return res.status(404).json({ message: "User not found" });
      }
      const user = usersResult[0];
      res.json({ id: user.id, role: user.role, email: user.email });
    } catch (error) {
      console.error("Error fetching user:", error);
      res.status(500).json({ message: "Failed to fetch user" });
    }
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (logout)
  app.post('/api/auth/logout', (req, res) => {
    res.clearCookie('token', { httpOnly: true, sameSite: 'lax' });
    res.status(200).json({ message: "Logged out" });
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT –≤ cookie
  app.get('/api/me', (req, res) => {
    const token = req.cookies.token;
    if (!token) return res.status(401).json({ message: "Not authenticated" });
    try {
      const payload = jwt.verify(token, process.env.JWT_SECRET!);
      res.json({ email: (payload as any).email });
    } catch {
      res.status(401).json({ message: "Invalid token" });
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.post('/api/register', async (req, res) => {
    try {
      const { firstName, lastName, email, password } = req.body;
      if (!firstName || !lastName || !email || !password) {
        return res.status(400).json({ message: "–ò–º—è, —Ñ–∞–º–∏–ª–∏—è, email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
      }
      // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º email
      const normalizedEmail = String(email).trim().toLowerCase();
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ email –Ω–µ –∑–∞–Ω—è—Ç
      const existing = await db.select().from(users).where(eq(users.email, normalizedEmail));
      if (existing.length > 0) {
        return res.status(400).json({ message: "Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
      }
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ id
      const id = crypto.randomUUID();
      // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      const password_hash = await bcrypt.hash(password, 10);
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const [user] = await db.insert(users).values({
        id,
        firstName,
        lastName,
        email: normalizedEmail,
        role: "user",
        password_hash,
      }).returning();
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
      const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET!, { expiresIn: "7d" });
      res.cookie('token', token, { httpOnly: true, sameSite: 'lax' });
      res.json({ token, user: { id: user.id, email: user.email } });
    } catch (error) {
      console.error("Registration error:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
    }
  });

  // –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.post('/api/login', async (req, res) => {
    try {
      // –ü–æ–ª—É—á–∞–µ–º email –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const { email, password } = req.body;
      if (!email || !password) {
        return res.status(400).json({ message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
      }
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      const existing = await db.select().from(users).where(eq(users.email, email));
      if (existing.length === 0) {
        return res.status(400).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      const user = existing[0];
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ö—ç—à–∞ –ø–∞—Ä–æ–ª—è
      if (!user.password_hash) {
        return res.status(400).json({ message: "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–æ–ª—å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É." });
      }
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å —Ö—ç—à–µ–º
      const valid = await bcrypt.compare(password, (user as any).password_hash);
      if (!valid) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
      }
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT-—Ç–æ–∫–µ–Ω–∞
      const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET!, { expiresIn: "7d" });
      res.cookie('token', token, { httpOnly: true, sameSite: 'lax' });
      res.json({ user: { id: user.id, email: user.email } });
    } catch (error) {
      console.error("Login error:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞" });
    }
  });

  // Retreat routes
  app.get('/api/retreats', (req, res) => {
    try {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—Ç—Ä–∏—Ç–æ–≤
      const retreats = [
        { id: 1, title: 'Yoga Retreat', organizerId: 'test-user', price: '100', currentParticipants: 0, maxParticipants: 10 },
      ];
      res.json(retreats);
    } catch (error) {
      console.error("Error fetching retreats:", (error as any));
      res.status(500).json({ message: "Failed to fetch retreats" });
    }
  });

  app.get('/api/retreats/:id', (req, res) => {
    try {
      const id = parseInt(req.params.id);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ä–µ—Ç—Ä–∏—Ç
      const retreat = { id, organizerId: 'test-user', price: '100', currentParticipants: 0, maxParticipants: 10 };
      res.json(retreat);
    } catch (error) {
      console.error("Error fetching retreat:", (error as any));
      res.status(500).json({ message: "Failed to fetch retreat" });
    }
  });

  app.post('/api/retreats', (req, res, next) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      const user = { id: 'test-user', role: 'organizer' };
      if (!user || user.role !== 'organizer') {
        return res.status(403).json({ message: "Only organizers can create retreats" });
      }
      const retreatData = insertRetreatSchema.parse({
        ...req.body,
        organizerId: user.id,
      });
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Ç—Ä–∏—Ç
      const retreat = { ...retreatData, id: 2, currentParticipants: 0 };
      res.status(201).json(retreat);
    } catch (error) {
      console.error("Error creating retreat:", (error as any));
      res.status(400).json({ message: (error as any).message || "Failed to create retreat" });
    }
  });

  app.get('/api/organizer/retreats', (req, res, next) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      const user = { id: 'test-user', role: 'organizer' };
      const retreats = [
        { id: 1, title: 'Yoga Retreat', organizerId: user.id, price: '100', currentParticipants: 0, maxParticipants: 10 },
      ];
      res.json(retreats);
    } catch (error) {
      console.error("Error fetching organizer retreats:", (error as any));
      res.status(500).json({ message: "Failed to fetch retreats" });
    }
  });

  // Booking routes
  app.get('/api/bookings', (req, res, next) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—É—á–∞—Å—Ç–Ω–∏–∫–∞
      const user = { id: 'test-user', role: 'participant' };
      const bookings = [
        { id: 1, retreatId: 1, participantId: user.id, participants: 1, totalAmount: '100', status: 'confirmed' },
      ];
      res.json(bookings);
    } catch (error) {
      console.error("Error fetching bookings:", (error as any));
      res.status(500).json({ message: "Failed to fetch bookings" });
    }
  });

  app.get('/api/retreats/:id/bookings', (req, res, next) => {
    try {
      const retreatId = parseInt(req.params.id);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      const user = { id: 'test-user', role: 'organizer' };
      // Check if user is the organizer of this retreat
      const retreat = { organizerId: 'test-user' };
      if (!retreat || retreat.organizerId !== user.id) {
        return res.status(403).json({ message: "Access denied" });
      }
      const bookings = [
        { id: 1, retreatId, participantId: 'test-user', participants: 1, totalAmount: '100', status: 'confirmed' },
      ];
      res.json(bookings);
    } catch (error) {
      console.error("Error fetching retreat bookings:", (error as any));
      res.status(500).json({ message: "Failed to fetch bookings" });
    }
  });

  // Stripe payment routes
  app.post("/api/create-payment-intent", (req, res, next) => {
    try {
      if (!stripe) {
        return res.status(503).json({ message: "Payment processing is currently unavailable. Please contact support." });
      }
      const { retreatId, participants } = req.body;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—É—á–∞—Å—Ç–Ω–∏–∫–∞
      const user = { id: 'test-user', role: 'participant' };
      const retreat = { price: '100', currentParticipants: 0, maxParticipants: 10 };
      if (!retreat) {
        return res.status(404).json({ message: "Retreat not found" });
      }
      if (retreat.currentParticipants + participants > retreat.maxParticipants) {
        return res.status(400).json({ message: "Not enough spots available" });
      }
      const amount = parseFloat(retreat.price) * participants;
      res.json({ clientSecret: 'test-client-secret' });
    } catch (error) {
      console.error("Error creating payment intent:", (error as any));
      res.status(500).json({ message: "Error creating payment intent: " + (error as any).message });
    }
  });

  app.post("/api/confirm-booking", (req, res, next) => {
    try {
      if (!stripe) {
        return res.status(503).json({ message: "Payment processing is currently unavailable. Please contact support." });
      }
      const { paymentIntentId, retreatId, participants } = req.body;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—É—á–∞—Å—Ç–Ω–∏–∫–∞
      const user = { id: 'test-user', role: 'participant' };
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π payment intent
      if (paymentIntentId !== 'test-client-secret') {
        return res.status(400).json({ message: "Payment not successful" });
      }
      const retreat = { id: retreatId, price: '100', maxParticipants: 10, currentParticipants: 0 };
      if (!retreat) {
        return res.status(404).json({ message: "Retreat not found" });
      }
      const totalAmount = parseFloat(retreat.price) * participants;
      // –°–æ–∑–¥–∞—ë–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const booking = { id: 2, retreatId, participantId: user.id, participants, totalAmount: totalAmount.toString(), status: 'confirmed' };
      res.json(booking);
    } catch (error) {
      console.error("Error confirming booking:", (error as any));
      res.status(500).json({ message: "Error confirming booking: " + (error as any).message });
    }
  });

  // Refund routes
  app.post('/api/refund-requests', (req, res, next) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—É—á–∞—Å—Ç–Ω–∏–∫–∞
      const user = { id: 'test-user', role: 'participant' };
      const { bookingId, reason } = req.body;
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const booking = { id: bookingId, participantId: user.id };
      if (!booking || booking.participantId !== user.id) {
        return res.status(403).json({ message: "Access denied" });
      }
      // –°–æ–∑–¥–∞—ë–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
      const refundRequest = { id: 1, bookingId, reason, status: 'pending' };
      res.status(201).json(refundRequest);
    } catch (error) {
      console.error("Error creating refund request:", (error as any));
      res.status(400).json({ message: (error as any).message || "Failed to create refund request" });
    }
  });

  app.post('/api/process-refund/:id', (req, res, next) => {
    try {
      const refundRequestId = parseInt(req.params.id);
      const { approved, adminNotes } = req.body;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      const user = { id: 'test-user', role: 'organizer' };
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      const refundRequest: any = { id: refundRequestId, bookingId: 1, status: 'pending', refundAmount: null, adminNotes: null, processedDate: null };
      const booking = { id: 1, retreatId: 1, participantId: 'test-user', participants: 1, totalAmount: '100', status: 'confirmed', stripePaymentIntentId: 'test-client-secret' };
      const retreat = { id: 1, organizerId: 'test-user' };
      if (!retreat || retreat.organizerId !== user.id) {
        return res.status(403).json({ message: "Access denied" });
      }
      if (approved) {
        // –§–∏–∫—Ç–∏–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç Stripe
        const refund = { id: 'test-refund-id' };
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        booking.status = 'refunded';
        refundRequest.status = 'processed';
        refundRequest.refundAmount = booking.totalAmount;
        refundRequest.adminNotes = adminNotes;
        refundRequest.processedDate = new Date();
      } else {
        refundRequest.status = 'denied';
        refundRequest.adminNotes = adminNotes;
        refundRequest.processedDate = new Date();
      }
      res.json(refundRequest);
    } catch (error) {
      console.error("Error processing refund:", (error as any));
      res.status(500).json({ message: "Error processing refund: " + (error as any).message });
    }
  });

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ nodemailer)
  app.post('/api/forgot-password', async (req, res) => {
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const usersResult = await db.select().from(users).where(eq(users.email, email));
    if (usersResult.length > 0) {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
      const resetToken = Math.random().toString(36).slice(2) + Date.now();
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å —Ç–æ–∫–µ–Ω <-> email (–≤ –ø–∞–º—è—Ç–∏)
      resetTokens[resetToken] = email;
      const resetLink = `http://localhost:5173/reset-password?token=${resetToken}`;
      if (process.env.SMTP_HOST && process.env.SMTP_USER && process.env.SMTP_PASS && process.env.SMTP_FROM) {
        const transporter = nodemailer.createTransport({
          host: process.env.SMTP_HOST,
          port: Number(process.env.SMTP_PORT) || 587,
          secure: false,
          auth: {
            user: process.env.SMTP_USER,
            pass: process.env.SMTP_PASS,
          },
        });
        try {
          await transporter.sendMail({
            from: process.env.SMTP_FROM,
            to: email,
            subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è YogaRetreatPro",
            text: `–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${resetLink}`,
            html: `<p>–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è <a href='${resetLink}'>–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ</a>.</p>`
          });
          console.log(`–ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:", err);
        }
      } else {
        console.log(`–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è ${email}: ${resetLink}`);
        console.warn("SMTP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
      }
    }
    // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —á—Ç–æ–±—ã –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å, –µ—Å—Ç—å –ª–∏ email
    res.json({ message: "–ï—Å–ª–∏ email –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!" });
  });

  // –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
  app.post('/api/reset-password', async (req, res) => {
    const { token, password } = req.body;
    if (!token || !password) {
      return res.status(400).json({ message: "–¢–æ–∫–µ–Ω –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }
    const email = resetTokens[token];
    if (!email) {
      return res.status(400).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω" });
    }
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const usersResult = await db.select().from(users).where(eq(users.email, email));
    if (!usersResult.length) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    // –•—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const password_hash = await bcrypt.hash(password, 10);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
    await db.update(users).set({ password_hash }).where(eq(users.email, email));
    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π)
    delete resetTokens[token];
    res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!" });
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Google –∞–∫–∫–∞—É–Ω—Ç–∞)
  app.post('/api/google-register', async (req, res) => {
    const { firstName, lastName, email, password } = req.body;
    
    if (!firstName || !lastName || !email || !password) {
      return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const existingUser = await db.select().from(users).where(eq(users.email, email));
      if (existingUser.length > 0) {
        return res.status(409).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
      }

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Google –∞–∫–∫–∞—É–Ω—Ç–∞
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Google API
      
      const password_hash = await bcrypt.hash(password, 10);
      const [newUser] = await db.insert(users).values({
        id: email, // –ò—Å–ø–æ–ª—å–∑—É–µ–º email –∫–∞–∫ id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        email,
        firstName,
        lastName,
        password_hash,
        role: "user"
      }).returning();

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = jwt.sign(
        { id: newUser.id, email: newUser.email },
        process.env.JWT_SECRET!,
        { expiresIn: "7d" }
      );

      res.cookie('token', token, { httpOnly: true, sameSite: 'lax' });
      res.json({ 
        message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Google",
        token,
        user: { id: newUser.id, email: newUser.email, firstName: newUser.firstName, lastName: newUser.lastName }
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
  app.post('/api/auth/register-partner', async (req, res) => {
    try {
      const { name, surname, email, phone, company, experience, password, role } = req.body;
      
      if (!name || !surname || !email || !password) {
        return res.status(400).json({ 
          success: false, 
          message: "–ò–º—è, —Ñ–∞–º–∏–ª–∏—è, email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" 
        });
      }

      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º email
      const normalizedEmail = String(email).trim().toLowerCase();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email –Ω–µ –∑–∞–Ω—è—Ç
      const existing = await db.select().from(users).where(eq(users.email, normalizedEmail));
      if (existing.length > 0) {
        return res.status(409).json({ 
          success: false, 
          message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" 
        });
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ id
      const id = crypto.randomUUID();
      
      // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      const password_hash = await bcrypt.hash(password, 10);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      const [user] = await db.insert(users).values({
        id,
        firstName: name,
        lastName: surname,
        email: normalizedEmail,
        role: "organizer", // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        password_hash,
      }).returning();

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
      const token = jwt.sign(
        { id: user.id, email: user.email }, 
        process.env.JWT_SECRET!, 
        { expiresIn: "7d" }
      );
      
      res.cookie('token', token, { httpOnly: true, sameSite: 'lax' });
      
      res.status(201).json({ 
        success: true,
        message: "–ê–∫–∫–∞—É–Ω—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        user: { 
          id: user.id, 
          email: user.email, 
          firstName: user.firstName, 
          lastName: user.lastName,
          role: user.role 
        }
      });
    } catch (error) {
      console.error("Partner registration error:", error);
      res.status(500).json({ 
        success: false, 
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞" 
      });
    }
  });

  // –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google (–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Google –∞–∫–∫–∞—É–Ω—Ç–∞)
  app.post('/api/google-login', async (req, res) => {
    const { email, password } = req.body;
    
    if (!email || !password) {
      return res.status(400).json({ message: "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    try {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      const usersResult = await db.select().from(users).where(eq(users.email, email));
      if (usersResult.length === 0) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" });
      }

      const user = usersResult[0];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      if (!user.password_hash) {
        return res.status(401).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø–∞—Ä–æ–ª—è" });
      }
      const isValidPassword = await bcrypt.compare(password, user.password_hash);
      if (!isValidPassword) {
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
      }

      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö Google –∞–∫–∫–∞—É–Ω—Ç–∞
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Google API

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
      const token = jwt.sign(
        { id: user.id, email: user.email },
        process.env.JWT_SECRET!,
        { expiresIn: "7d" }
      );

      res.cookie('token', token, { httpOnly: true, sameSite: 'lax' });
      res.json({ 
        message: "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Google",
        token,
        user: { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName }
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞" });
    }
  });

  // API endpoint –¥–ª—è –∑–∞—è–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ —Ä–µ—Ç—Ä–∏—Ç–æ–≤
  app.post("/api/retreat-applications", async (req, res) => {
    try {
      console.log("–ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", req.body);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Zod —Å—Ö–µ–º—ã
      const validatedData = insertRetreatApplicationSchema.parse(req.body);
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –ë–î (–ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
      const fs = require('fs');
      const path = require('path');
      
      const applicationWithId = {
        id: Date.now(), // –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
        ...validatedData,
        status: 'pending',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª applications.json
      const applicationsFile = path.join(process.cwd(), 'applications.json');
      let applications = [];
      
      try {
        if (fs.existsSync(applicationsFile)) {
          const data = fs.readFileSync(applicationsFile, 'utf8');
          applications = JSON.parse(data);
        }
      } catch (err) {
        console.log('–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª applications.json');
      }
      
      applications.push(applicationWithId);
      fs.writeFileSync(applicationsFile, JSON.stringify(applications, null, 2));
      
      console.log("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª:", applicationWithId);
      
      res.status(201).json({
        success: true,
        message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
        application: applicationWithId
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:", error);
      
      if (error instanceof Error && error.name === 'ZodError') {
        return res.status(400).json({
          success: false,
          message: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
          errors: error
        });
      }
      
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏"
      });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–∫—Ä–æ–º–µ API) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  app.get('*', (req, res) => {
    if (!req.path.startsWith('/api/')) {
      res.status(200).send('');
    } else {
      res.status(404).json({ message: 'API route not found' });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}