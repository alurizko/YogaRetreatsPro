import { useState, useRef, useEffect } from "react";
import { Link, useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from "@/components/ui/dropdown-menu";
import { Clover, Menu, User, Settings, LogOut, Eye, EyeOff, ChevronDown } from "lucide-react";
import { useAuth, resetAuthCache } from "@/hooks/useAuth";
import AuthModal from "./AuthModal";

export default function Header() {
  const { isAuthenticated, user } = useAuth();
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const [isRegisterModalOpen, setRegisterModalOpen] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [isLoginModalOpen, setLoginModalOpen] = useState(false);
  const [showLoginPassword, setShowLoginPassword] = useState(false);
  const [registerError, setRegisterError] = useState("");
  const [registerLoading, setRegisterLoading] = useState(false);
  const [loginError, setLoginError] = useState("");
  const [loginLoading, setLoginLoading] = useState(false);
  const [forgotOpen, setForgotOpen] = useState(false);
  const [forgotEmail, setForgotEmail] = useState("");
  const [forgotSent, setForgotSent] = useState(false);
  const [forgotLoading, setForgotLoading] = useState(false);
  const [forgotError, setForgotError] = useState("");
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è Google —Ñ–æ—Ä–º
  const [isGoogleRegisterModalOpen, setGoogleRegisterModalOpen] = useState(false);
  const [isGoogleLoginModalOpen, setGoogleLoginModalOpen] = useState(false);
  const [googleRegisterError, setGoogleRegisterError] = useState("");
  const [googleRegisterLoading, setGoogleRegisterLoading] = useState(false);
  const [googleLoginError, setGoogleLoginError] = useState("");
  const [googleLoginLoading, setGoogleLoginLoading] = useState(false);
  const [showGoogleRegisterPassword, setShowGoogleRegisterPassword] = useState(false);
  const [showGoogleLoginPassword, setShowGoogleLoginPassword] = useState(false);
  const [showRegisterForm, setShowRegisterForm] = useState(false);
  
  const [, setLocation] = useLocation();

  const handleLogout = () => {
    window.location.href = "/api/logout";
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const clearAllAuthData = () => {
    console.log("üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...");
    localStorage.removeItem("token");
    resetAuthCache(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    // –û—á–∏—â–∞–µ–º –∫—É–∫–∏ —á–µ—Ä–µ–∑ API
    fetch("/api/logout", { credentials: "include" });
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    window.location.reload();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const diagnoseAuthState = () => {
    console.log("üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    const token = localStorage.getItem("token");
    console.log("üîç localStorage token:", token ? token.substring(0, 20) + "..." : "–ù–ï–¢");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏
    console.log("üîç –í—Å–µ –∫—É–∫–∏:", document.cookie);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.log("üîç –ö—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üîç –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log("üîç isAuthenticated:", isAuthenticated);
    console.log("üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===");
  };

  const handleForgot = async (e: React.FormEvent) => {
    e.preventDefault();
    setForgotLoading(true);
    setForgotError("");
    try {
      const res = await fetch("/api/forgot-password", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email: forgotEmail }),
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
      }
      setForgotSent(true);
    } catch (err: any) {
      setForgotError(err.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞");
    } finally {
      setForgotLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
  const handleGoogleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setGoogleRegisterError("");
    setGoogleRegisterLoading(true);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
    console.log("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π...");
    localStorage.removeItem("token");
    
    const form = e.target as HTMLFormElement;
    const firstName = (form[0] as HTMLInputElement).value;
    const lastName = (form[1] as HTMLInputElement).value;
    const email = (form[2] as HTMLInputElement).value;
    const password = (form[3] as HTMLInputElement).value;
    
    console.log("üîç [Google Register] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:", { firstName, lastName, email });
    
    try {
      const res = await fetch("/api/google-register", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ firstName, lastName, email, password }),
        credentials: "include",
      });
      const data = await res.json();
      
      console.log("üîç [Google Register] –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
      
      if (!res.ok) {
        if (res.status === 409) {
          throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π email.");
        }
        throw new Error(data.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }
      
      if (data.token) {
        localStorage.setItem("token", data.token);
        console.log("üîç [Google Register] –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç–æ–∫–µ–Ω:", data.token.substring(0, 20) + "...");
      }
      
      console.log("üîç [Google Register] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ dashboard –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data.user?.email);
      setGoogleRegisterModalOpen(false);
      setLocation("/participant-dashboard");
    } catch (err: any) {
      setGoogleRegisterError(err.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    } finally {
      setGoogleRegisterLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google
  const handleGoogleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setGoogleLoginError("");
    setGoogleLoginLoading(true);
    const form = e.target as HTMLFormElement;
    const email = (form[0] as HTMLInputElement).value;
    const password = (form[1] as HTMLInputElement).value;
    
    try {
      const res = await fetch("/api/google-login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password }),
        credentials: "include",
      });
      const data = await res.json();
      
      if (!res.ok) {
        if (res.status === 404) {
          setGoogleLoginError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
          setShowRegisterForm(true);
          return;
        }
        throw new Error(data.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
      }
      
      if (data.token) {
        localStorage.setItem("token", data.token);
      }
      setGoogleLoginModalOpen(false);
      setLocation("/participant-dashboard");
    } catch (err: any) {
      setGoogleLoginError(err.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
    } finally {
      setGoogleLoginLoading(false);
    }
  };

  return (
    <>
      <header className="bg-[#fff6f0] shadow-sm sticky top-0 z-50">
        <div className="flex h-16 items-center">
          {/* 1. –õ–æ–≥–æ—Ç–∏–ø —Å–ª–µ–≤–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º */}
          <div className="flex-1 flex justify-start pl-[40px]">
            <Link href="/">
              <div className="flex items-center text-2xl font-bold text-forest-green cursor-pointer">
                <Clover className="mr-2" />
                YogaRetreat
              </div>
            </Link>
          </div>
          {/* 2. '–†–µ—Ç—Ä–∏—Ç—ã' */}
          <div className="flex-1 flex justify-center">
            <Link href="/retreats" className="text-soft-gray hover:text-forest-green transition-colors text-lg font-semibold border-2 border-transparent hover:border-sage-green" style={{display: 'block', opacity: 1, visibility: 'visible', pointerEvents: 'auto', position: 'relative', zIndex: 1000}}>
              –†–µ—Ç—Ä–∏—Ç—ã
            </Link>
          </div>
          {/* 3. '–ù–∞–π—Ç–∏ —Ä–µ—Ç—Ä–∏—Ç' */}
          <div className="flex-1 flex justify-center">
            <Link href="/retreats" className="text-forest-green hover:text-warm-orange transition-colors text-lg font-semibold border-2 border-transparent hover:border-sage-green" style={{display: 'block', opacity: 1, visibility: 'visible', pointerEvents: 'auto', position: 'relative', zIndex: 1000}}>
              –ù–∞–π—Ç–∏ —Ä–µ—Ç—Ä–∏—Ç
            </Link>
          </div>
          {/* 4. Login Button with User Icon */}
          <div className="flex-1 flex justify-center items-center relative">
            <DropdownMenu open={dropdownOpen} onOpenChange={setDropdownOpen}>
              <DropdownMenuTrigger asChild>
                <button className="flex items-center gap-2 px-4 py-2 rounded-md border-2 border-gray-300 hover:border-[#20B2AA] bg-white hover:bg-gray-50 transition-colors duration-200 text-forest-green hover:text-[#20B2AA] font-semibold">
                  <User className="w-5 h-5" />
                  <span>–í–æ–π—Ç–∏</span>
                  <ChevronDown className="w-4 h-4 ml-1" />
                </button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="center" className="w-56 bg-white border border-gray-200 rounded-lg shadow-lg">
                <DropdownMenuItem 
                  onClick={() => {
                    setIsAuthModalOpen(true);
                    setDropdownOpen(false);
                  }}
                  className="px-4 py-3 hover:bg-[#20B2AA] hover:text-white cursor-pointer flex justify-center"
                >
                  <span className="font-semibold">–í—Ö–æ–¥</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator className="bg-gray-200" />
                <DropdownMenuItem 
                  onClick={() => {
                    setIsAuthModalOpen(true);
                    setDropdownOpen(false);
                  }}
                  className="px-4 py-3 hover:bg-[#20B2AA] hover:text-white cursor-pointer flex justify-center"
                >
                  <span className="font-semibold">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
          {/* 5. '–°—Ç–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º' —Å–ø—Ä–∞–≤–∞ —Å –æ—Ç—Å—Ç—É–ø–æ–º */}
          <div className="flex-1 flex justify-end pr-[40px]">
            <Link href="/organizer/add-retreat" className="text-forest-green hover:text-warm-orange transition-colors text-lg font-semibold border-2 border-transparent hover:border-sage-green" style={{display: 'block', opacity: 1, visibility: 'visible', pointerEvents: 'auto', position: 'relative', zIndex: 1000}}>
              –°—Ç–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
            </Link>
          </div>
        </div>
      </header>

          {/* Mobile Menu */}
          {isMobileMenuOpen && (
            <div className="md:hidden py-4 border-t">
              <nav className="space-y-2">
                <Link href="/retreats" className="block py-2 text-soft-gray hover:text-forest-green transition-colors">
                  –†–µ—Ç—Ä–∏—Ç—ã
                </Link>
                {isAuthenticated && user?.role === 'organizer' && (
                  <Link href="/organizer/dashboard" className="block py-2 text-soft-gray hover:text-forest-green transition-colors">
                    –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º
                  </Link>
                )}
                {!isAuthenticated && (
                  <>
                    <Link href="/auth" className="block py-2 text-soft-gray hover:text-forest-green transition-colors">
                      –í–æ–π—Ç–∏ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                    </Link>
                    <Button 
                      variant="ghost"
                      className="text-soft-gray hover:text-forest-green w-full justify-start p-2"
                      onClick={() => window.location.href = "/api/login"}
                    >
                      –°—Ç–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
                    </Button>
                  </>
                )}
              </nav>
            </div>
          )}

      <AuthModal open={isAuthModalOpen} onOpenChange={setIsAuthModalOpen} />

      {/* Register Modal */}
      {isRegisterModalOpen && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-8 w-full max-w-md relative">
            <button className="absolute top-2 right-2 text-gray-400 hover:text-black" onClick={() => setRegisterModalOpen(false)}>‚úï</button>
            <h2 className="text-2xl font-bold text-center mb-6">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
            <form className="space-y-4" onSubmit={async (e) => {
              e.preventDefault();
              setRegisterError("");
              setRegisterLoading(true);
              const form = e.target as HTMLFormElement;
              const firstName = (form[0] as HTMLInputElement).value;
              const lastName = (form[1] as HTMLInputElement).value;
              const email = (form[2] as HTMLInputElement).value;
              const password = (form[3] as HTMLInputElement).value;
              try {
                const res = await fetch("/api/register", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ firstName, lastName, email, password, role: "user" }),
                  credentials: "include",
                });
                let data = null;
                const contentType = res.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                  data = await res.json();
                }
                if (!res.ok) throw new Error((data && data.message) || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
                if (data && data.token) {
                  localStorage.setItem("token", data.token);
                }
                setRegisterModalOpen(false);
                setLocation("/participant-dashboard");
              } catch (err: any) {
                setRegisterError(err.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
              } finally {
                setRegisterLoading(false);
              }
            }}>
              <input
                type="text"
                placeholder="–ò–º—è"
                className="w-full border rounded px-4 py-2"
                required
              />
              <input
                type="text"
                placeholder="–§–∞–º–∏–ª–∏—è"
                className="w-full border rounded px-4 py-2"
                required
              />
              <input
                type="email"
                placeholder="Email"
                className="w-full border rounded px-4 py-2"
                required
              />
              <div className="relative">
                <input
                  type={showPassword ? "text" : "password"}
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  className="w-full border rounded px-4 py-2 pr-10"
                  required
                />
                <button
                  type="button"
                  className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black"
                  onClick={() => setShowPassword((v) => !v)}
                  tabIndex={-1}
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              {registerError && <div className="text-red-500 text-center text-sm">{registerError}</div>}
              <button
                type="submit"
                className="w-full bg-warm-orange text-black font-semibold py-2 rounded hover:bg-warm-orange/90 disabled:opacity-60"
                disabled={registerLoading}
              >
                {registerLoading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
              </button>
            </form>
            <div className="my-4 text-center text-gray-400">–∏–ª–∏</div>
            <button
              className="w-full flex items-center justify-center gap-2 border border-gray-300 py-2 rounded hover:bg-gray-100"
              onClick={() => {
                setRegisterModalOpen(false);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π Google OAuth –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                window.location.href = '/api/auth/google?mode=register';
              }}
            >
              <img src="https://www.svgrepo.com/show/475656/google-color.svg" alt="Google" className="w-5 h-5" />
              –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Google
            </button>
          </div>
        </div>
      )}

      {/* Login Modal */}
      {isLoginModalOpen && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-8 w-full max-w-md relative">
            <button className="absolute top-2 right-2 text-gray-400 hover:text-black" onClick={() => setLoginModalOpen(false)}>‚úï</button>
            <h2 className="text-2xl font-bold text-center mb-6">–í—Ö–æ–¥</h2>
            <form className="space-y-4" onSubmit={async (e) => {
              e.preventDefault();
              setLoginError("");
              setLoginLoading(true);
              const form = e.target as HTMLFormElement;
              const email = (form[0] as HTMLInputElement).value;
              const password = (form[1] as HTMLInputElement).value;
              try {
                const res = await fetch("/api/login", {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({ email, password }),
                  credentials: "include",
                });
                const data = await res.json();
                if (!res.ok) throw new Error(data.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
                localStorage.setItem("token", data.token);
                setLoginModalOpen(false);
                setLocation("/participant-dashboard");
              } catch (err: any) {
                setLoginError(err.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞");
              } finally {
                setLoginLoading(false);
              }
            }}>
              <input
                type="email"
                placeholder="Email"
                className="w-full border rounded px-4 py-2"
                required
              />
              <div className="relative">
                <input
                  type={showLoginPassword ? "text" : "password"}
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  className="w-full border rounded px-4 py-2 pr-10"
                  required
                />
                <button
                  type="button"
                  className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black"
                  onClick={() => setShowLoginPassword((v) => !v)}
                  tabIndex={-1}
                >
                  {showLoginPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              <button
                type="button"
                className="text-sm text-blue-600 hover:underline focus:outline-none mb-2"
                onClick={() => { setForgotOpen(true); setLoginModalOpen(false); }}
              >
                –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
              </button>
              {loginError && <div className="text-red-500 text-center text-sm">{loginError}</div>}
              <button
                type="submit"
                className="w-full bg-warm-orange text-black font-semibold py-2 rounded hover:bg-warm-orange/90 disabled:opacity-60"
                disabled={loginLoading}
              >
                {loginLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏"}
              </button>
            </form>
            <div className="my-4 text-center text-gray-400">–∏–ª–∏</div>
            <button
              className="w-full flex items-center justify-center gap-2 border border-gray-300 py-2 rounded hover:bg-gray-100"
              onClick={() => {
                setLoginModalOpen(false);
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π Google OAuth –¥–ª—è –≤—Ö–æ–¥–∞
                window.location.href = '/api/auth/google?mode=login';
              }}
            >
              <img src="https://www.svgrepo.com/show/475656/google-color.svg" alt="Google" className="w-5 h-5" />
              –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
            </button>
          </div>
        </div>
      )}
      {/* Forgot Password Modal */}
      {forgotOpen && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-8 w-full max-w-sm relative">
            <button className="absolute top-2 right-2 text-gray-400 hover:text-black" onClick={() => { setForgotOpen(false); setForgotSent(false); setForgotEmail(""); }}>
              ‚úï
            </button>
            <h2 className="text-xl font-bold text-center text-forest-green mb-4">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
            {forgotSent ? (
              <div className="py-6 text-center text-green-700">
                –ï—Å–ª–∏ email –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
              </div>
            ) : (
              <form className="space-y-4 py-4" onSubmit={handleForgot}>
                <label className="block text-sm font-medium text-gray-700 text-left" htmlFor="forgot-email">
                  –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email
                </label>
                <input
                  id="forgot-email"
                  type="email"
                  value={forgotEmail}
                  onChange={e => setForgotEmail(e.target.value)}
                  required
                  placeholder="you@email.com"
                  className="w-full border rounded px-4 py-2"
                  autoFocus
                />
                {forgotError && <div className="text-red-600 text-xs">{forgotError}</div>}
                <button
                  type="submit"
                  className="w-full bg-forest-green text-white hover:bg-forest-green/90 py-2 rounded"
                  disabled={forgotLoading}
                >
                  {forgotLoading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"}
                </button>
              </form>
            )}
          </div>
        </div>
      )}

      {/* Google Register Modal */}
      {isGoogleRegisterModalOpen && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-8 w-full max-w-md relative">
            <button className="absolute top-2 right-2 text-gray-400 hover:text-black" onClick={() => setGoogleRegisterModalOpen(false)}>‚úï</button>
            <h2 className="text-2xl font-bold text-center mb-6">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Google</h2>
            <p className="text-sm text-gray-600 text-center mb-6">
              –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            </p>
            <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded">
              <p className="text-sm text-yellow-800 mb-2">
                <strong>–í–∞–∂–Ω–æ:</strong> –ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –æ—á–∏—Å—Ç–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:
              </p>
              <button
                type="button"
                onClick={clearAllAuthData}
                className="text-xs bg-yellow-500 text-white px-2 py-1 rounded hover:bg-yellow-600 mr-2"
              >
                –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              </button>
              <button
                type="button"
                onClick={diagnoseAuthState}
                className="text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600"
              >
                –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
              </button>
            </div>
            <form className="space-y-4" onSubmit={handleGoogleRegister}>
              <input
                type="text"
                placeholder="–ò–º—è"
                className="w-full border rounded px-4 py-2"
                required
              />
              <input
                type="text"
                placeholder="–§–∞–º–∏–ª–∏—è"
                className="w-full border rounded px-4 py-2"
                required
              />
              <input
                type="email"
                placeholder="Email Google –∞–∫–∫–∞—É–Ω—Ç–∞"
                className="w-full border rounded px-4 py-2"
                required
              />
              <div className="relative">
                <input
                  type={showGoogleRegisterPassword ? "text" : "password"}
                  placeholder="–ü–∞—Ä–æ–ª—å Google –∞–∫–∫–∞—É–Ω—Ç–∞"
                  className="w-full border rounded px-4 py-2 pr-10"
                  required
                />
                <button
                  type="button"
                  className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black"
                  onClick={() => setShowGoogleRegisterPassword((v) => !v)}
                  tabIndex={-1}
                >
                  {showGoogleRegisterPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              {googleRegisterError && <div className="text-red-500 text-center text-sm">{googleRegisterError}</div>}
              <button
                type="submit"
                className="w-full bg-warm-orange text-black font-semibold py-2 rounded hover:bg-warm-orange/90 disabled:opacity-60"
                disabled={googleRegisterLoading}
              >
                {googleRegisterLoading ? "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Google"}
              </button>
            </form>
          </div>
        </div>
      )}

      {/* Google Login Modal */}
      {isGoogleLoginModalOpen && (
        <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-8 w-full max-w-md relative">
            <button className="absolute top-2 right-2 text-gray-400 hover:text-black" onClick={() => {
              setGoogleLoginModalOpen(false);
              setShowRegisterForm(false);
              setGoogleLoginError("");
            }}>‚úï</button>
            <h2 className="text-2xl font-bold text-center mb-6">–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google</h2>
            <p className="text-sm text-gray-600 text-center mb-6">
              –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
            </p>
            
            {!showRegisterForm ? (
              <form className="space-y-4" onSubmit={handleGoogleLogin}>
                <input
                  type="email"
                  placeholder="Email Google –∞–∫–∫–∞—É–Ω—Ç–∞"
                  className="w-full border rounded px-4 py-2"
                  required
                />
                <div className="relative">
                  <input
                    type={showGoogleLoginPassword ? "text" : "password"}
                    placeholder="–ü–∞—Ä–æ–ª—å Google –∞–∫–∫–∞—É–Ω—Ç–∞"
                    className="w-full border rounded px-4 py-2 pr-10"
                    required
                  />
                  <button
                    type="button"
                    className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black"
                    onClick={() => setShowGoogleLoginPassword((v) => !v)}
                    tabIndex={-1}
                  >
                    {showGoogleLoginPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
                {googleLoginError && <div className="text-red-500 text-center text-sm">{googleLoginError}</div>}
                <button
                  type="submit"
                  className="w-full bg-warm-orange text-black font-semibold py-2 rounded hover:bg-warm-orange/90 disabled:opacity-60"
                  disabled={googleLoginLoading}
                >
                  {googleLoginLoading ? "–í—Ö–æ–¥..." : "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Google"}
                </button>
              </form>
            ) : (
              <div className="space-y-4">
                <div className="text-center text-red-500 text-sm">{googleLoginError}</div>
                <button
                  className="w-full bg-blue-600 text-white font-semibold py-2 rounded hover:bg-blue-700"
                  onClick={() => {
                    setShowRegisterForm(false);
                    setGoogleLoginModalOpen(false);
                    setGoogleRegisterModalOpen(true);
                  }}
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                </button>
              </div>
            )}
          </div>
        </div>
      )}
    </>
  );
}
