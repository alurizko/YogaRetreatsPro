-- Schema generated to match column names exactly as on the screenshot
-- NOTE: Types and constraints chosen to be practical for Supabase.
-- Review and adjust if any column should be different.

-- Extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Utility: common updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- users
DROP TABLE IF EXISTS users CASCADE;
CREATE TABLE users (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT NOT NULL UNIQUE,
  first_name TEXT,
  profile_image_url TEXT,
  role TEXT DEFAULT 'user',
  password_hash TEXT,
  stripe_customer_id TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER tg_users_updated BEFORE UPDATE ON users
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- instructors
DROP TABLE IF EXISTS instructors CASCADE;
CREATE TABLE instructors (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  bio TEXT,
  photo_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER tg_instructors_updated BEFORE UPDATE ON instructors
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- blog_posts
DROP TABLE IF EXISTS blog_posts CASCADE;
CREATE TABLE blog_posts (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  author_id INT REFERENCES users(id) ON DELETE SET NULL,
  title TEXT NOT NULL,
  content TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX idx_blog_posts_author ON blog_posts(author_id);
CREATE TRIGGER tg_blog_posts_updated BEFORE UPDATE ON blog_posts
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- retreats
DROP TABLE IF EXISTS retreats CASCADE;
CREATE TABLE retreats (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  location TEXT,
  start_date DATE,
  end_date DATE,
  price NUMERIC(10,2),
  max_participants INTEGER,
  current_participants INTEGER,
  organizer_id INT REFERENCES users(id) ON DELETE SET NULL,
  image_url TEXT,
  is_active BOOLEAN DEFAULT TRUE,
  cancellation_policy TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX idx_retreats_organizer_id ON retreats(organizer_id);
CREATE INDEX idx_retreats_dates ON retreats(start_date, end_date);
CREATE TRIGGER tg_retreats_updated BEFORE UPDATE ON retreats
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- retreat_instructors (junction)
DROP TABLE IF EXISTS retreat_instructors CASCADE;
CREATE TABLE retreat_instructors (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  retreat_id INT NOT NULL REFERENCES retreats(id) ON DELETE CASCADE,
  instructor_id INT NOT NULL REFERENCES instructors(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE UNIQUE INDEX uq_retreat_instructor ON retreat_instructors(retreat_id, instructor_id);

-- retreat_applications
DROP TABLE IF EXISTS retreat_applications CASCADE;
CREATE TABLE retreat_applications (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT,
  location TEXT,
  description TEXT,
  price NUMERIC(10,2),
  duration INTEGER,
  capacity INTEGER,
  email TEXT,
  phone TEXT,
  status TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER tg_retreat_app_updated BEFORE UPDATE ON retreat_applications
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- bookings
DROP TABLE IF EXISTS bookings CASCADE;
CREATE TABLE bookings (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  retreat_id INT REFERENCES retreats(id) ON DELETE SET NULL,
  users_id INT REFERENCES users(id) ON DELETE SET NULL,
  participants INTEGER,
  total_amount NUMERIC(10,2),
  status TEXT,
  stripe_payment_intent_id TEXT,
  stripe_refund_id TEXT,
  booking_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX idx_bookings_retreat ON bookings(retreat_id);
CREATE INDEX idx_bookings_user ON bookings(users_id);
CREATE TRIGGER tg_bookings_updated BEFORE UPDATE ON bookings
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- refund_requests
DROP TABLE IF EXISTS refund_requests CASCADE;
CREATE TABLE refund_requests (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  booking_id INT REFERENCES bookings(id) ON DELETE CASCADE,
  reason TEXT,
  status TEXT,
  refund_amount NUMERIC(10,2),
  admin_notes TEXT,
  request_date TIMESTAMP WITH TIME ZONE,
  processed_date TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX idx_refund_requests_booking ON refund_requests(booking_id);
CREATE TRIGGER tg_refund_requests_updated BEFORE UPDATE ON refund_requests
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- reviews
DROP TABLE IF EXISTS reviews CASCADE;
CREATE TABLE reviews (
  id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT REFERENCES users(id) ON DELETE SET NULL,
  retreat_id INT REFERENCES retreats(id) ON DELETE SET NULL,
  rating INTEGER CHECK (rating BETWEEN 1 AND 5),
  comment TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX idx_reviews_retreat ON reviews(retreat_id);
CREATE INDEX idx_reviews_user ON reviews(user_id);
CREATE TRIGGER tg_reviews_updated BEFORE UPDATE ON reviews
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- sessions (compatible with connect-pg-simple style)
DROP TABLE IF EXISTS sessions CASCADE;
CREATE TABLE sessions (
  sid TEXT PRIMARY KEY,
  sess JSONB NOT NULL DEFAULT '{}'::jsonb,
  expire TIMESTAMP WITH TIME ZONE
);
CREATE INDEX idx_sessions_expire ON sessions(expire);

-- RLS enablement (optional - uncomment if you need row-level security)
-- ALTER TABLE users ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE instructors ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE blog_posts ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE retreats ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE retreat_instructors ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE retreat_applications ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE refund_requests ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
-- ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;
